//i separated everything so that if you wanted to study the shader all you had to do was look at each include individually
//rather than look at a huge ass mess

//includes
#include <header/header.fxh>
//

//base structure
struct vs_in
{
    float4 pos          : POSITION;
    float3 normal       : NORMAL;
    float2 uv            : TEXCOORD0;
    float2 uv2            : TEXCOORD1;
    float4 vertexcolor   : TEXCOORD2; 
};


struct vs_out
{
    float4 pos          : POSITION;
    float2 uv           : TEXCOORD0;
    float4 vertex       : TEXCOORD1;
    float3 normal       : TEXCOORD2;
    float3 view         : TEXCOORD3;
    float2 uv2          : TEXCOORD4;
};

vs_out vs_model ( vs_in i)
{
    vs_out o = (vs_out)0; //you're not mentally sane if you write this as INPUT/OUTPUT
    o.pos = mul(i.pos, mmd_wvp);
    o.uv = i.uv;
	o.normal = normalize(mul((float3x3) mmd_world, i.normal));
    o.view = normalize(mmd_cameraPosition - mul(i.pos.xyz, (float3x3)mmd_world));
    o.vertex = i.vertexcolor;
    o.uv2 = i.uv2;
    return o;
}

#include <Shared/Shitkai_Common.fxh>
#include <shared/shitkai-outline.fxsub>

float4 ps_model(vs_out i, float vface : VFACE) : COLOR0
{
    //cause i know my ass isnt writing i.func all day
    float2 uv = i.uv;
    float2 uv2 = i.uv2;
    float4 vertex = i.vertex;
    float3 normal = i.normal / vface;
    float3 view = i.view;

    // float ndotl = dot(normal, -light_d) * 0.5 + 0.5;
    //

    float4 color = egColor;
    float4 u_xlat1 = 1;
    float4 diffuse = tex2D(diffuseSampler, uv);
    float4 shadow = tex2D(ShadowSampler, uv);
    int u_xlati9 = _CharacterId;
    // u_xlat16_2.xyz = _SekaiCharacterSpecularColorArray[u_xlati9].www * _SekaiCharacterSpecularColorArray[u_xlati9].xyz;
    float4 htex = tex2D(HTexSampler, uv);
    float faceshadow = 1;
    // if(use_subtexture) faceshadow = ;
    float ndotl = dot(-light_d, normal);
    ndotl = (use_subtexture) ? 1-face_shading(uv2) : (Shitkai_Shadow(ndotl, htex.z));
    // ndotl = ;
    u_xlat1.xyz = (-diffuse.xyz) + shadow;
    u_xlat1.xyz = (ndotl * faceshadow) * u_xlat1.xyz + diffuse.xyz;



    float3 u_xlat16_6 = Shitkai_Coloring(u_xlat1.xyz, u_xlati9, htex.x, diffuse.xyz);
    #ifdef additive_alpha
    color.xyz = 1;
    clip(diffuse.x - 0.45);
    #endif

    //
    float4 u_xlat3 = 1;
    // float3 u_xlat4 = 1;
    u_xlat1.xzw = _SekaiRimLightColor.www * _SekaiRimLightColor.xyz;
    u_xlat3.x = dot(normal, view);
    u_xlat3.z = dot(view, -light_d);
    float4 u_xlat4 = dot(normal, normal);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * normal;
    float u_xlat28 = dot(-light_d, -light_d);
    u_xlat28 = rsqrt(u_xlat28);
    float3 u_xlat5 = float3(u_xlat28.xxx) * -light_d;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    
    float u_xlat16_26 = -1.0 + _SekaiRimLightShadowSharpness;
    float u_xlat16_30 = 1.0 + (-_SekaiRimLightShadowSharpness);
    float u_xlat12 = (-u_xlat16_26) + u_xlat16_30;
    float u_xlat20 = (-u_xlat16_26) + u_xlat4.x;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat20;

    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);

    u_xlat20 = u_xlat12 * -2.0 + 3.0;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat20;
    u_xlat5.xyz = _SekaiShadowRimLightColor.xyz * _SekaiShadowRimLightColor.www + (-u_xlat1.xzw);
    u_xlat1.xzw = float3(u_xlat12.xxx) * u_xlat5.xyz + u_xlat1.xzw;
    u_xlat3.xz = max(u_xlat3.xz, float2(0.0, 0.0));

    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat16_26 = 10.0 + (-_SekaiRimLightFactor.x);
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat16_26 * u_xlat3.x;
    u_xlat3.x = exp2(u_xlat3.x);
    float u_xlat19 = u_xlat3.x * u_xlat3.z + (-u_xlat3.x);
    u_xlat3.x = _SekaiRimLightFactor.w * u_xlat19 + u_xlat3.x;
    u_xlat19 = (-u_xlat4.x) + 0.0500000007;
    int u_xlati4 = (u_xlat19 > 0.0) ? uint(0xFFFFFFFFu) : uint(0);
    int u_xlati19 = (u_xlat19 < 0.0) ? uint(0xFFFFFFFFu) : uint(0);

    u_xlati19 = (-u_xlati4) + u_xlati19;

    u_xlat19 = float(u_xlati19);
    u_xlat19 = u_xlat3.x * u_xlat19 + (-u_xlat3.x);
    u_xlat3.x = _SekaiRimLightFactor.w * u_xlat19 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + (-_RimThreshold);
    u_xlat19 = float(1.0) / _SekaiRimLightFactor.z;
    u_xlat3.x = u_xlat19 * u_xlat3.x;

    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat19 = u_xlat3.x * -2.0 + 3.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = u_xlat3.x * u_xlat19;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat3.xxx;
    u_xlat4.xyz = u_xlat1.xzw * vertex.yyy;
    u_xlat16_6.xyz = u_xlat1.xzw * vertex.yyy + u_xlat16_6.xyz;


    //
    float4 u_xlatb3 = 0;
    float3 u_xlat16_2 = _SekaiCharacterSpecularColor.www * _SekaiCharacterSpecularColor.xyz;
    float3 halffloatt = normalize(view + -light_d);
    u_xlat1.x = dot(halffloatt, normal);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    float u_xlat10 = 10.0 / _SpecularPower;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.xyz = u_xlat16_2.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * htex.www + u_xlat16_6.xyz;
    u_xlatb3.xzw = (u_xlat1.xxyz >= float4(0.5, 0.0, 0.5, 0.5).xzw);
    u_xlat16_2.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb3.w) ? float(1.0) : float(0.0);
    float3 u_xlat16_7 = u_xlat1.xyz + u_xlat1.xyz;
    

    u_xlat3.xzw = u_xlat16_7.xyz * _SekaiCharacterAmbientLightColor;
    float3 u_xlat16_8 = (-u_xlat1.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_8.xyz;
    u_xlat1.xyz = float3(1.0, 1.0, 1.0) + (-_SekaiCharacterAmbientLightColor.xyz);
    u_xlat1.xyz = (-u_xlat16_8.xyz) * u_xlat1.xyz + float3(1.0, 1.0, 1.0);
    u_xlat16_7 = (-u_xlat16_7.xyz) * _SekaiCharacterAmbientLightColor.xyz + u_xlat1.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_7.xyz + u_xlat3.xzw;

    color.xyz *= u_xlat16_6;


    return color;
}

technique model_SS_tech <string MMDPASS = "object_ss"; >
{
    pass main
    {
        VertexShader = compile vs_3_0 vs_model();
        PixelShader = compile ps_3_0 ps_model();
    }
    pass edge
    {
        cullmode = cw;
        VertexShader = compile vs_3_0 edge_model();
        PixelShader = compile ps_3_0 ps_edge();
    }
}

technique model_tech <string MMDPASS = "object"; >
{
    pass main
    {
        VertexShader = compile vs_3_0 vs_model();
        PixelShader = compile ps_3_0 ps_model();
    }
    pass edge
    {
        cullmode = cw;
        VertexShader = compile vs_3_0 edge_model();
        PixelShader = compile ps_3_0 ps_edge();
    }
}